// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const createCourse = `-- name: CreateCourse :execlastid
insert into courses (name, holes, lapsed, live, street_address_1, city, state, postal_code, country, latitude,
                     longitude)
values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateCourseParams struct {
	Name           string
	Holes          int32
	Lapsed         bool
	Live           bool
	StreetAddress1 string
	City           string
	State          string
	PostalCode     string
	Country        string
	Latitude       sql.NullString
	Longitude      sql.NullString
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createCourse,
		arg.Name,
		arg.Holes,
		arg.Lapsed,
		arg.Live,
		arg.StreetAddress1,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getACourse = `-- name: GetACourse :one
select id, name, holes, lapsed, live, street_address_1, city, state, postal_code, country, latitude, longitude, created_at, updated_at
from courses
where id = ?
limit 1
`

func (q *Queries) GetACourse(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getACourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Holes,
		&i.Lapsed,
		&i.Live,
		&i.StreetAddress1,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.Country,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT id, name, holes, lapsed, live, street_address_1, city, state, postal_code, country, latitude, longitude, created_at, updated_at
FROM courses
ORDER BY id
limit ? offset ?
`

type ListCoursesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCourses(ctx context.Context, arg ListCoursesParams) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Holes,
			&i.Lapsed,
			&i.Live,
			&i.StreetAddress1,
			&i.City,
			&i.State,
			&i.PostalCode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
