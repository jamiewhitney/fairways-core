// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type BookingsStatus string

const (
	BookingsStatusConfirmed BookingsStatus = "confirmed"
	BookingsStatusRequested BookingsStatus = "requested"
)

func (e *BookingsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingsStatus(s)
	case string:
		*e = BookingsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingsStatus: %T", src)
	}
	return nil
}

type NullBookingsStatus struct {
	BookingsStatus BookingsStatus
	Valid          bool // Valid is true if BookingsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingsStatus), nil
}

type Booking struct {
	ID              int64
	CreatedAt       time.Time
	UpdatedAt       sql.NullTime
	DeletedAt       sql.NullTime
	UserID          string
	CourseID        int64
	Golfers         int64
	Datetime        time.Time
	Price           float64
	BookingID       string
	StripePaymentID string
	Status          BookingsStatus
	Confirmed       bool
}
